{"version":3,"sources":["components/DownloadButton.tsx","utilities/downloads.ts","data/neighborhoods.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["homeToString","household","pets","map","pet","familyName","id","name","kind","join","downloadCsv","data","joined","neighborhood","zipCode","homes","console","log","content","filename","contentType","blob","Blob","type","url","URL","createObjectURL","pom","document","createElement","href","setAttribute","click","downloadBlob","DownloadButton","neighborhoods","onClick","INITIAL_DATA","App","useState","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"oOAMO,SAASA,EAAaC,GACzB,OAAOA,EAAUC,KAAKC,KAAI,SAACC,GAAD,gBACnBH,EAAUI,WADS,aACMD,EAAIE,GADV,aACiBF,EAAIG,KADrB,aAC8BH,EAAII,SAC1DC,KAAK,MAGJ,SAASC,EAAYC,GACxB,IAAMC,EAASD,EAAKR,KAAI,SAACU,GAAD,MAEpB,oBAAaA,EAAaC,QAA1B,MAEC,oCAEAD,EAAaE,MAAMZ,IAAIH,GAAcS,KAAK,SAE7CA,KAAK,UACPO,QAAQC,IAAIL,GCnBT,SAAsBM,EAAiBC,EAAkBC,GAE5D,IAAMC,EAAO,IAAIC,KAAK,CAACJ,GAAU,CAAEK,KAAMH,IACnCI,EAAMC,IAAIC,gBAAgBL,GAG1BM,EAAMC,SAASC,cAAc,KACnCF,EAAIG,KAAON,EACXG,EAAII,aAAa,WAAYZ,GAC7BQ,EAAIK,QDWJC,CAAarB,EAAQ,oBAAqB,YAGvC,SAASsB,EAAT,GAAwF,IAA/DC,EAA8D,EAA9DA,cAC5B,OAAO,wBAAQC,QAAS,kBAAI1B,EAAYyB,IAAjC,0BExBJ,IAAME,EAA+B,CACxC,CAAEvB,QAAS,QAASC,MAAO,CACvB,CAAEV,WAAY,WAAYH,KAAM,CAC5B,CAACI,GAAI,KAAME,KAAM,MAAOD,KAAM,QAC9B,CAACD,GAAI,KAAME,KAAM,MAAOD,KAAM,YAC9B,CAACD,GAAI,KAAME,KAAM,MAAOD,KAAM,UAElC,CAAEF,WAAY,QAASH,KAAM,CACzB,CAACI,GAAI,OAAQE,KAAM,MAAOD,KAAM,QAChC,CAACD,GAAI,OAAQE,KAAM,UAAWD,KAAM,aAG5C,CAAEO,QAAS,QAASC,MAAO,CACvB,CAAEV,WAAY,SAAUH,KAAM,CAC1B,CAACI,GAAI,KAAME,KAAM,QAASD,KAAM,WAChC,CAACD,GAAI,IAAKE,KAAM,QAASD,KAAM,YAC/B,CAACD,GAAI,MAAOE,KAAM,QAASD,KAAM,QACjC,CAACD,GAAI,OAAQE,KAAM,QAASD,KAAM,cAEtC,CAAEF,WAAY,QAASH,KAAM,CACzB,CAACI,GAAI,MAAOE,KAAM,MAAOD,KAAM,cCR5B+B,MATf,WACI,MAAwBC,mBAAyBF,GAA1CF,EAAP,oBACA,OACI,qBAAKK,UAAU,MAAf,SACI,cAACN,EAAD,CAAgBC,cAAeA,OCI5BM,EAZS,SAACC,GACjBA,GAAeA,aAAuBC,UACtC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACzDJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHpBQ,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJxB,SAASyB,eAAe,SAM5BZ,K","file":"static/js/main.48282c99.chunk.js","sourcesContent":["import React from \"react\";\nimport { Household } from \"../interfaces/household\";\nimport { Neighborhood } from \"../interfaces/neighborhood\";\nimport { Pet } from \"../interfaces/pet\";\nimport { downloadBlob } from \"../utilities/downloads\";\n\nexport function homeToString(household: Household): string {\n    return household.pets.map((pet: Pet): string =>\n        `${household.familyName}, ${pet.id}, ${pet.name}, ${pet.kind}`\n    ).join(\"\\n\");\n}\n\nexport function downloadCsv(data: Neighborhood[]): void {\n    const joined = data.map((neighborhood: Neighborhood): string => \n        // Start each chunk with the ZIP code\n        `ZIP Code:,${neighborhood.zipCode}\\n`\n        // Then have a header\n        +\"Family Name, Pet ID, Name, Kind\\n\"\n        // Middle layer is joined with one new line between level\n        +neighborhood.homes.map(homeToString).join(\"\\n\")\n    // Outermost layer is joined with three new lines\n    ).join(\"\\n\\n\\n\");\n    console.log(joined);\n    downloadBlob(joined, \"neighborhoods.csv\", \"text/csv\");\n}\n\nexport function DownloadButton({neighborhoods}: {neighborhoods: Neighborhood[]}): JSX.Element {\n    return <button onClick={()=>downloadCsv(neighborhoods)}>Download CSV</button>;\n}","/** Download contents as a file\n * Source: https://stackoverflow.com/questions/14964035/how-to-export-javascript-array-info-to-csv-on-client-side\n */\nexport function downloadBlob(content: string, filename: string, contentType: string): void {\n    // Create a blob\n    const blob = new Blob([content], { type: contentType });\n    const url = URL.createObjectURL(blob);\n\n    // Create a link to download it\n    const pom = document.createElement(\"a\");\n    pom.href = url;\n    pom.setAttribute(\"download\", filename);\n    pom.click();\n}","import { Neighborhood } from \"../interfaces/neighborhood\";\n\n\nexport const INITIAL_DATA: Neighborhood[] = [\n    { zipCode: \"12345\", homes: [\n        { familyName: \"Johnsons\", pets: [\n            {id: 1230, kind: \"dog\", name: \"Fido\"},\n            {id: 5234, kind: \"cat\", name: \"Whiskers\"},\n            {id: 9243, kind: \"dog\", name: \"Spot\"},\n        ]},\n        { familyName: \"Oates\", pets: [\n            {id: 587234, kind: \"dog\", name: \"Hall\"},\n            {id: 324234, kind: \"chicken\", name: \"Grain\"}\n        ]}\n    ]},\n    { zipCode: \"82582\", homes: [\n        { familyName: \"Carter\", pets: [\n            {id: 2345, kind: \"mouse\", name: \"Salazar\"},\n            {id: 123, kind: \"mouse\", name: \"Osbourne\"},\n            {id: 64355, kind: \"mouse\", name: \"Luna\"},\n            {id: 329084, kind: \"mouse\", name: \"Santiago\"}\n        ]},\n        { familyName: \"Wills\", pets: [\n            {id: 98763, kind: \"dog\", name: \"Frank\"},\n        ]}\n    ]}\n];","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport { DownloadButton } from \"./components/DownloadButton\";\nimport { INITIAL_DATA } from \"./data/neighborhoods\";\nimport { Neighborhood } from \"./interfaces/neighborhood\";\n\nfunction App(): JSX.Element {\n    const [neighborhoods] = useState<Neighborhood[]>(INITIAL_DATA);\n    return (\n        <div className=\"App\">\n            <DownloadButton neighborhoods={neighborhoods}/>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}